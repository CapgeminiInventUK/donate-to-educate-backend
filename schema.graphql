type SignUpData {
  id: String!
  email: String!
  type: String!
}

type School {
  urn: ID!
  name: String!
  localAuthority: String!
  postcode: String
  registered: Boolean!
}

type ProfileItems {
  items: String
  banner: String
  helpBannerTitle: String
  helpBannerBody: String
  whatToExpect: String
  actionText: String
}

type SchoolProfile {
  request: ProfileItems
  donate: ProfileItems
  excess: ProfileItems
}

type LocalAuthorityUser {
  name: String!
  firstName: String!
  lastName: String!
  jobTitle: String!
  department: String!
  email: String!
  phone: String!
  notes: String
}

type LocalAuthority {
  code: String!
  name: String!
  registered: Boolean!
}

type JoinRequest {
  name: String!
  localAuthority: String!
  type: String!
  requestTime: Float!
  status: String!
  email: String!
}

type Query {
  getSchoolByName(name: String!): School!
  getSchoolsByLa(name: String!): [School!]!
  getSchools: [School!]!

  getLocalAuthorities: [LocalAuthority!]!
  getJoinRequests: [JoinRequest!]!

  getSchoolProfile(name: String!): SchoolProfile!

  getSignUpData(id: String!): SignUpData
}

type Mutation {
  registerLocalAuthority(
    name: String!
    firstName: String!
    lastName: String!
    jobTitle: String!
    department: String!
    email: String!
    phone: String!
    notes: String
  ): Boolean!

  updateSchoolProfile(name: String!, key: String!, value: String!): Boolean!
  updateJoinRequest(localAuthority: String!, name: String!, status: String!): Boolean!

  insertSignUpData(id: String!, email: String!, type: String!): Boolean!
}

schema {
  query: Query
  mutation: Mutation
}
